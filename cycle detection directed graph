#include<unordered_map>
#include<list>

bool dfscycle(int node,unordered_map<int,bool> &visited,
  unordered_map<int,bool> &dfsvisited,unordered_map<int,list<int>> &adjlist)
  {
    visited[node]=1;
    dfsvisited[node]=1;

    for(auto i: adjlist[node])
    {
      if(!visited[i])
      {
        bool cycle=dfscycle(i,visited,dfsvisited,adjlist);
        if(cycle)
          return true;
      }
      else if(dfsvisited[i])
      {
        return true;
      }
    }
    dfsvisited[node]=0;
    return false;
  }



int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  // Write your code here.
  unordered_map<int,list<int>> adjlist;
  for(int i=0;i<edges.size();i++)
  {
    int u=edges[i].first;
    int v=edges[i].second;

    adjlist[u].push_back(v);
    
  }

  unordered_map<int,bool> visited;
  unordered_map<int,bool> dfsvisited;
  for(int i=1;i<=n;i++)
  {
    if(!visited[i])
    {
      bool cycle=dfscycle(i,visited,dfsvisited,adjlist);
      if(cycle)
        return true;
    }
  }
  return false;
}

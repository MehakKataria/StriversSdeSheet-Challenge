#include<unordered_map>
#include<list>
#include<queue>

bool isCycle(int node,unordered_map<int,bool>&visited,unordered_map<int,list<int>>&adj)
{
    unordered_map<int,int> parent;
    parent[node]=-1;

    queue<int> q;
    q.push(node);
    visited[node]=1;

    while(!q.empty())
    {
        int frontnode=q.front();
        q.pop();

        for(auto i: adj[frontnode])
        {
            if(visited[i]==true&&parent[frontnode]!=i)
                return true;
            else if(!visited[i])
            {
                q.push(i);
                visited[i]=1;
                parent[i]=frontnode;
            }
        }
    }
    return false;
}


string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // Write your code here.
    unordered_map<int,list<int>>adj;
    for(int i=0;i<m;i++)
    {
        int u=edges[i][0];
        int v=edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    bool ans;
    unordered_map<int,bool>visited;
    for(int i=1;i<n+1;i++)
    {
        if(!visited[i])
        {
            ans=isCycle(i,visited,adj);
            if(ans==true)
                return "Yes";
        }
       
    }

    return "No";
}
